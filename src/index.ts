import TelegramBot from "node-telegram-bot-api";
import dotenv from "dotenv";
import MongoConnection from "./modules/MongoConnection";
import { IUser } from "./modules/interfaces";
import { rmSync, writeFileSync } from "fs";
import { URL } from "url";

dotenv.config();

const bot = new TelegramBot(process.env.BOT_TOKEN!, { polling: true });

const dbConnection = new MongoConnection(process.env.DB_URL!);

const profileKeyboard = [
    [
        {
            text: "üóí –û—Å–Ω–æ–≤–Ω–æ–µ",
            callback_data: JSON.stringify({ action: "showInfo" }),
        },
        {
            text: "üí≥ –ë–∞–ª–∞–Ω—Å",
            callback_data: JSON.stringify({ action: "balance" }),
        },
        {
            text: "üì° –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            callback_data: JSON.stringify({ action: "help" }),
        },
    ],
];

async function getProfileText(tgId: number): Promise<string> {
    const db = dbConnection.db("bot");
    const res = (await db?.collection("users").findOne({ tgId })) as IUser;
    let text = "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç";
    text += `\n\n‚ôªÔ∏è –ü—Ä–æ—Ñ–∏–ª—å Lolzteam: ${res.lolzLink}`;
    text += `\nüÜî Telegram ID: ${tgId}`;
    text += `\nüóì –î–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –≤ –∫–æ–º–∞–Ω–¥—É: ${res.activateDate?.toLocaleString(
        "ru-RU"
    )}`;
    return text;
}

async function showProfile(tgId: number) {
    const text = await getProfileText(tgId);
    bot.sendMessage(tgId, text, {
        reply_markup: {
            inline_keyboard: profileKeyboard,
        },
    });
}

async function showProfileInline(tgId: number, message_id: number) {
    const text = await getProfileText(tgId);
    bot.editMessageText(text, {
        chat_id: tgId,
        message_id,
        reply_markup: {
            inline_keyboard: profileKeyboard,
        },
    });
}

bot.onText(/\/start/, async (msg) => {
    const db = dbConnection.db("bot");
    const res = (await db
        ?.collection("users")
        .findOne({ tgId: msg.chat.id })) as IUser;
    if (!res) {
        bot.sendMessage(
            msg.chat.id,
            "‚ùóÔ∏è–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\n‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å Lolzteam"
        );
        db?.collection("users").insertOne({
            tgId: msg.chat.id,
            activeState: "REG_NICK",
        });
        return;
    }

    if (res.activeState == "WAIT_ACCESS")
        bot.sendMessage(msg.chat.id, "–∂–¥–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è");
    else if (res.activeState == "ACTIVATED") showProfile(msg.chat.id);
});

bot.onText(/\/msg (\d+) (.+)/, async (msg, match) => {
    if (msg.chat.id != Number(process.env.BOT_GROUP_ID!)) return;

    await bot.sendMessage(match![1], match![2]);
    bot.sendMessage(msg.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
});

bot.onText(/\/setbalance (\d+) (\d+)/, async (msg, match) => {
    if (msg.chat.id != Number(process.env.MY_ID!)) return;

    const db = dbConnection.db("bot");
    await db?.collection("users").updateOne(
        { tgId: Number(match![1]) },
        {
            $set: { balance: Number(match![2]) },
        }
    );
    bot.sendMessage(msg.chat.id, "–ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
});

bot.onText(/^\/members/, async (msg) => {
    if (msg.chat.id != Number(process.env.MY_ID!)) return;
    const db = dbConnection.db("bot");

    const all = (await db
        ?.collection("users")
        .find({
            activeState: { $in: ["ACTIVATED", "WAIT_ASK", "WITHDRAW_ASK"] },
        })
        .toArray()) as IUser[];
    let text = "";
    all?.forEach((el, index) => {
        text += `${index + 1}. ${el.lolzLink}, ${
            el.tgId
        }, ${el.activateDate?.toLocaleString("ru-RU")}`;
    });

    writeFileSync("members.txt", text);

    bot.sendMessage(msg.chat.id, "–ò–¥–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞");
    await bot.sendDocument(msg.chat.id, "members.txt");
    rmSync("members.txt");
});

bot.onText(/^[^\/]/, async (msg) => {
    console.log(msg);

    if (msg.chat.type == "private") {
        const db = dbConnection.db("bot");
        const res = (await db
            ?.collection("users")
            .findOne({ tgId: msg.chat.id })) as IUser;

        if (res.activeState == "REG_NICK") {
            try {
                const url = new URL(msg.text!);
                if (url.host != "lolz.guru") throw "error";

                bot.sendMessage(
                    msg.chat.id,
                    "üìà –†–∞–±–æ—Ç–∞–ª–∏ –ª–∏ –í—ã –≤ –∫–∞–∫–∏—Ö-–ª–∏–±–æ —Ç–∏–º–∞—Ö? (–£–∫–∞–∑–∞—Ç—å –æ–ø—ã—Ç)"
                );
                db?.collection("users").updateOne(
                    { tgId: msg.chat.id },
                    {
                        $set: {
                            activeState: "REG_TEXT",
                            lolzLink: msg.text,
                        },
                    }
                );
            } catch (e) {
                bot.sendMessage(
                    msg.chat.id,
                    "üî¥ –û—à–∏–±–∫–∞! –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ https://lolz.guru/......."
                );
            }

            return;
        }

        if (res.activeState == "REG_TEXT") {
            bot.sendMessage(
                msg.chat.id,
                "üì® –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è"
            );
            db?.collection("users").updateOne(
                { tgId: msg.chat.id },
                {
                    $set: {
                        activeState: "WAIT_ACCESS",
                        desc: msg.text,
                    },
                }
            );
            const buttons = [
                [
                    {
                        text: "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
                        callback_data: JSON.stringify({
                            action: "accept",
                            tgId: msg.chat.id,
                        }),
                    },
                    {
                        text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                        callback_data: JSON.stringify({
                            action: "decline",
                            tgId: msg.chat.id,
                        }),
                    },
                ],
                [
                    {
                        text: "üö∑ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
                        callback_data: JSON.stringify({
                            action: "ban",
                            tgId: msg.chat.id,
                        }),
                    },
                ],
            ];
            bot.sendMessage(
                process.env.BOT_GROUP_ID!,
                `üìØ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É!\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n‚îî Telegram ID: ${msg.chat.id}\n\nüè∑ –§–æ—Ä—É–º–Ω–∏–∫:\n‚îî –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: ${res.lolzLink}\n\nüîñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n‚îî –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: ${msg.text}`,
                {
                    reply_markup: { inline_keyboard: buttons },
                    disable_web_page_preview: true,
                }
            );
            return;
        }
        if (res.activeState == "WAIT_ASK") {
            db?.collection("users").updateOne(
                { tgId: msg.chat.id },
                {
                    $set: {
                        activeState: "ACTIVATED",
                    },
                }
            );
            bot.sendMessage(
                msg.chat.id,
                "‚è≥–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –í–∞—à –≤–æ–ø—Ä–æ—Å."
            );
            const res = await bot.forwardMessage(
                process.env.BOT_GROUP_ID!,
                msg.chat.id,
                msg.message_id
            );
            bot.onReplyToMessage(
                res.chat.id,
                res.message_id,
                async (message) => {
                    if (message.text)
                        bot.sendMessage(msg.chat.id, message.text, {
                            reply_to_message_id: msg.message_id,
                        });
                }
            );
        }
        if (res.activeState == "WITHDRAW_ASK") {
            const res = (await db
                ?.collection("users")
                .findOne({ tgId: msg.chat.id })) as IUser;
            if (msg.chat.username) {
                bot.sendMessage(
                    process.env.BOT_GROUP_ID!,
                    `@${msg.chat.username} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–ø–ª–∞—Ç—É –Ω–∞ ${res.withdrawMethod}:\n\n${msg.text}`
                );
                await bot.sendMessage(
                    msg.chat.id,
                    `–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –ù–µ –∏–∑–º–µ–Ω—è–π—Ç–µ –Ω–∏–∫ —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã, –∏–Ω–∞—á–µ –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –≤–∞–º–∏ –Ω–µ —Å–º–æ–≥—É—Ç —Å–≤—è–∑–∞—Ç—å—Å—è. –¢–µ–∫—É—â–∏–π –Ω–∏–∫: @${msg.chat.username}`
                );
            } else {
                await bot.sendMessage(
                    msg.chat.id,
                    "–î–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–ø–ª–∞—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ username —Ç–µ–ª–µ–≥—Ä–∞–º–∞"
                );
            }

            db?.collection("users").updateOne(
                {
                    tgId: msg.chat.id,
                },
                {
                    $set: { activeState: "ACTIVATED" },
                    $unset: { withdrawMethod: 1 },
                }
            );
            showProfile(msg.chat.id);
        }
    }
});

const gotoMain = {
    text: "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    callback_data: JSON.stringify({ action: "gotoMain" }),
};

bot.on("callback_query", async (query) => {
    const db = dbConnection.db("bot");
    const data = JSON.parse(query.data!);

    console.log(query);

    if (query.message?.chat.id == process.env.BOT_GROUP_ID) {
        let newText = query.message?.text! + "\n\n";
        const date = new Date();

        switch (data.action) {
            case "accept":
                db?.collection("users").updateOne(
                    { tgId: data.tgId },
                    {
                        $set: {
                            activeState: "ACTIVATED",
                            activateDate: date,
                            balance: 0,
                        },
                    }
                );
                bot.sendMessage(
                    data.tgId,
                    "‚úÖ –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É!\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –º–∞–Ω—É–∞–ª–æ–º –∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–µ."
                );
                showProfile(data.tgId);
                newText += `üü¢ –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ ${
                    query.from.first_name
                }, ${date.toLocaleString("ru-RU")}`;
                break;
            case "decline":
                db?.collection("users").deleteOne({ tgId: data.tgId });
                bot.sendMessage(
                    data.tgId,
                    "üî¥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ï—Å–ª–∏ —É –≤–∞—Å –∏–º–µ—é—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @asurinovacom"
                );
                newText += `üî¥ –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ${
                    query.from.first_name
                }, ${date.toLocaleString("ru-RU")}`;
                break;
            case "ban":
                db?.collection("users").updateOne(
                    { tgId: data.tgId },
                    {
                        $set: {
                            activeState: "BANNED",
                        },
                    }
                );
                bot.sendMessage(data.tgId, "–≤–∞–º –±—ã–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É");
                newText += `—á–µ–ª–æ–≤–µ–∫ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω ${date.toLocaleString(
                    "ru-RU"
                )}`;
                break;
        }

        bot.editMessageText(newText, {
            message_id: query.message?.message_id,
            chat_id: query.message?.chat.id,
        });
        return;
    }

    const tgId = query.message?.chat.id!;
    switch (data.action) {
        case "showInfo":
            bot.editMessageText(
                "üì© –¢–µ–ª–µ–≥—Ä–∞–º–º —á–∞—Ç –≤–æ—Ä–∫–µ—Ä–æ–≤:  https://t.me/+dQj2co0tKaU0ZjBi\n‚úâÔ∏è –¢–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª –≤–æ—Ä–∫–µ—Ä–æ–≤: https://t.me/+qaSNe3Ngc2w0NDYy\nüíå –ú–∞–Ω—É–∞–ª: https://anastasia-surinova.gitbook.io/sandbox-work-by-asurinova./",
                {
                    message_id: query.message?.message_id,
                    chat_id: query.message?.chat.id,
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: "–ü–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
                                    callback_data: JSON.stringify({
                                        action: "getAccount",
                                        tgId,
                                    }),
                                },
                                gotoMain,
                            ],
                        ],
                    },
                }
            );
            break;
        case "gotoMain":
            showProfileInline(tgId, query.message?.message_id!);
            break;
        case "getAccount":
            bot.editMessageText("–æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞", {
                chat_id: tgId,
                message_id: query.message?.message_id,
            });
            showProfile(tgId);
            const result = await bot.sendMessage(
                process.env.MY_ID!,
                `@${query.message?.chat?.username} –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞`
            );
            bot.onReplyToMessage(
                result.chat.id,
                result.message_id,
                async (msg) => {
                    if (msg.text)
                        bot.sendMessage(tgId, msg.text, {
                            reply_to_message_id: query.message?.message_id,
                        });
                }
            );
            break;
        case "balance":
            const res = (await db
                ?.collection("users")
                .findOne({ tgId })) as IUser;
            let keyboard: TelegramBot.InlineKeyboardButton[] = [];
            if (res.balance! > 0)
                (keyboard = [
                    {
                        text: "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É",
                        callback_data: JSON.stringify({
                            action: "withdrawSelect",
                        }),
                    },
                ]),
                    (keyboard = [...keyboard, gotoMain]);
            bot.editMessageText(`üí∏ –í–∞—à –±–∞–ª–∞–Ω—Å: ${res.balance} —Ä—É–±–ª–µ–π`, {
                message_id: query.message?.message_id,
                chat_id: query.message?.chat.id,
                reply_markup: {
                    inline_keyboard: [keyboard],
                },
            });
            break;
        case "withdrawSelect":
            if (!query.message?.chat.username) {
                bot.editMessageText(
                    "–î–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–ø–ª–∞—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ username —Ç–µ–ª–µ–≥—Ä–∞–º–∞",
                    {
                        chat_id: tgId,
                        message_id: query.message?.chat.id,
                    }
                );
                showProfile(tgId);
            }
            bot.editMessageText("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∞", {
                chat_id: tgId,
                message_id: query.message?.message_id,
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "Qiwi",
                                callback_data: JSON.stringify({
                                    action: "enterWithdraw",
                                    method: "qiwi",
                                }),
                            },
                            {
                                text: "YooMoney",
                                callback_data: JSON.stringify({
                                    action: "enterWithdraw",
                                    method: "yoomoney",
                                }),
                            },
                            {
                                text: "–ö–∞—Ä—Ç–∞",
                                callback_data: JSON.stringify({
                                    action: "enterWithdraw",
                                    method: "card",
                                }),
                            },
                            {
                                text: "Crypto",
                                callback_data: JSON.stringify({
                                    action: "enterWithdraw",
                                    method: "crypto",
                                }),
                            },
                        ],
                        [gotoMain],
                    ],
                },
            });
            break;

        case "enterWithdraw":
            let text = "";
            switch (data.method) {
                case "qiwi":
                    text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ Qiwi –¥–ª—è –≤—ã–≤–æ–¥–∞";
                    break;
                case "yoomoney":
                    text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ YooMoney –¥–ª—è –≤—ã–≤–æ–¥–∞";
                    break;
                case "card":
                    text =
                        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞, –ò–º—è –§–∞–º–∏–ª–∏—é –ø–æ–ª—É—á–∞—Ç–µ–ª—è";
                    break;
                case "crypto":
                    text = "—Ç—É—Ç —Ö—É–π –∑–Ω–∞–µ—Ç —á—Ç–æ –Ω–∞–¥–æ –≤–≤–æ–¥–∏—Ç—å –∂–¥–µ–º —Å–µ—Ä–µ–∂—É";
                    break;
            }
            text += " –∏ —Å—É–º–º—É";
            bot.editMessageText(text, {
                chat_id: tgId,
                message_id: query.message?.message_id,
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                ...gotoMain,
                                callback_data: JSON.stringify({
                                    action: "cancelWithdraw",
                                }),
                            },
                        ],
                    ],
                },
            });
            db?.collection("users").updateOne(
                { tgId },
                {
                    $set: {
                        activeState: "WITHDRAW_ASK",
                        withdrawMethod: data.method,
                    },
                }
            );
            break;
        case "cancelWithdraw":
            showProfileInline(tgId, query.message?.message_id!);
            db?.collection("users").updateOne(
                { tgId },
                {
                    $set: {
                        activeState: "ACTIVATED",
                    },
                    $unset: {
                        withdrawMethod: 1,
                    },
                }
            );
            break;
        case "help":
            db?.collection("users").updateOne(
                { tgId },
                {
                    $set: {
                        activeState: "WAIT_ASK",
                    },
                }
            );
            bot.editMessageText(
                "üìù –ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. ",
                {
                    chat_id: tgId,
                    message_id: query.message?.message_id!,
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                    callback_data: JSON.stringify({
                                        action: "cancelHelp",
                                    }),
                                },
                            ],
                        ],
                    },
                }
            );
            break;
        case "cancelHelp":
            showProfileInline(tgId, query.message?.message_id!);
            db?.collection("users").updateOne(
                { tgId },
                {
                    $set: {
                        activeState: "ACTIVATED",
                    },
                }
            );
            break;
        default:
            break;
    }
});
